/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package iperfer;

import org.apache.commons.cli.*;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;


public class Iperfer {
    public String getGreeting() {
        return "Hello world.";
    }

    private static void runServer(String portNum) {
        int port = Integer.parseInt(portNum);
        if (port < 1024 || port > 65535) {
            System.err.println("Error: port number must be in the range 1024 to 65535.");
            printHelpAndExit();
        }
        try {
            ServerSocket serverSocket = new ServerSocket(port);
            Socket socket = serverSocket.accept();
            DataInputStream inputStream = new DataInputStream(socket.getInputStream());
            byte[] bytes = new byte[1024];
            long len = 0, readBytes;
            long startTime = System.currentTimeMillis();
            while ((readBytes = inputStream.read(bytes)) != -1) {
                len += readBytes;
            }
            double timeTaken = (System.currentTimeMillis() - startTime) / 1000.0;
            double rate = len / 1000000.0 * 8 / timeTaken;
            // System.out.printf("Time taken is %.3f s\n", timeTaken);
            System.out.printf("received=%d KB rate=%.3f Mbps\n", len / 1000, rate);
            serverSocket.close();
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void runClient(String hostname, String portNum, String time) {
        int port = Integer.parseInt(portNum);
        if (port < 1024 || port > 65535) {
            System.err.println("Error: port number must be in the range 1024 to 65535.");
            printHelpAndExit();
        }
        try {
            Socket clientSocket = new Socket(hostname, port);
            int timeToSend = Integer.parseInt(time);
            OutputStream outToServer = clientSocket.getOutputStream();
            long sendLen = 0;
            byte[] bytes = new byte[1024];
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) <= 1000 * timeToSend) {
                outToServer.write(bytes);
                sendLen += bytes.length;
            }
            double rate = sendLen / 1000000.0 * 8 / timeToSend;
            System.out.println(String.format("sent=%d KB rate=%.3f Mbps", sendLen / 1000, rate));
            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private static Options getOption() {
        Options options = new Options();
        Option serverOption = new Option("s", "server", false, "launch server");
        serverOption.setRequired(false);
        Option clientOption = new Option("c", "client", false, "launch client");
        clientOption.setRequired(false);
        Option portOption = new Option("p", "port", true, "port");
        portOption.setRequired(true);
        Option hostOption = new Option("h", "hostname", true, "hostname of server");
        hostOption.setRequired(false);
        Option timeOption = new Option("t", "time", true, "time of client");
        timeOption.setRequired(false);
        options.addOption(serverOption);
        options.addOption(clientOption);
        options.addOption(portOption);
        options.addOption(hostOption);
        options.addOption(timeOption);
        return options;
    }

    private static Options options = getOption();
    static HelpFormatter formatter = new HelpFormatter();

    private static void printHelpAndExit() {
        formatter.printHelp("Iperfer", options);
        System.exit(-1);
    }

    public static void main(String[] args) {

        CommandLineParser parser = new DefaultParser();

        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, args);
        } catch (ParseException e) {
            System.err.println("Argument parsing error");
            printHelpAndExit();
        }

        assert cmd != null;
        if (!cmd.hasOption("port")) {
            System.err.println("Error: missing or additional arguments");
            printHelpAndExit();
        }
        String portNum = cmd.getOptionValue("port");

        if (cmd.hasOption("client")) {
            if (!cmd.hasOption("time") || !cmd.hasOption("hostname")) {
                System.err.println("Error: missing or additional arguments");
                printHelpAndExit();
            }
            String time = cmd.getOptionValue("time");
            String host = cmd.getOptionValue("hostname");
            if (time == null || host == null || portNum == null) printHelpAndExit();
            runClient(host, portNum, time);
        } else if (cmd.hasOption("server")) {
            if (portNum == null) printHelpAndExit();
            runServer(portNum);
        } else printHelpAndExit();
    }
}
